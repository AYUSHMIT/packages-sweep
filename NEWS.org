#+title:                 sweep NEWS -- history of user-visible changes
#+author:                Eshel Yaron
#+email:                 me@eshelyaron.com
#+language:              en
#+options:               ':t toc:nil num:nil ^:{}
#+startup:               content indent

This file contains the release notes for =sweep=, an embedding of
SWI-Prolog in Emacs.

For further details, please consult the manual:
<https://eshelyaron.com/sweep.html>.

* Version 0.8.11 on 2022-11-21

** ~sweeprolog-new-predicate-location-function~ signature changed

The function specified by ~sweeprolog-new-predicate-location-function~
should now take three arguments, namely the functor, arity and neck of
the new predicate, instead of taking only the predicate indicator as a
sole argument.

** ~sweeprolog-insert-term-dwim~ now supports defining undefined DCG non-terminals

Defining a previously undefined predicate with
~sweeprolog-insert-term-dwim~ now analyzes the context of the undefined
predicate invocation to determine if it is expected to be a DCG
non-terminal, in which case an appropriate non-terminal definition is
inserted instead of a regular predicate.

* Version 0.8.10 on 2022-11-21

** ~sweeprolog-top-level-signal-current~ now calls ~trace/0~ by default

Calling ~sweeprolog-top-level-signal-current~ (~C-c C-c~ in
~sweeprolog-top-level~ buffers) now signals the top-level thread with
the goal specified by the user option
~sweeprolog-top-level-signal-default-goal~, instead of prompting for a
goal.  By default this user option is set to ~"trace"~, causing the
top-level thread to enter trace mode.  To have
~sweeprolog-top-level-signal-current~ prompt for a different goal
instead, call it with a prefix argument, i.e. ~C-u C-c C-c~.

** Fixes

- Fixed insertion of new clauses with ~sweeprolog-insert-term-dwim~ when
  the predicate at point is a DCG non-terminal or a predicate defined
  with SSU rules.  ~sweeprolog-insert-term-dwim~ now detects and inserts
  the correct neck (~:-~, ~-->~ or ~=>~) based on the previous clauses.

* Version 0.8.9 on 2022-11-19

** Predicate completions now uses holes for arguments

When completing a predicate with ~completion-at-point~ (~C-M-i~) and
choosing a predicate that takes arguments, holes are inserted is place
of each required argument.

** Syntax errors are now less intrusive

Syntax errors that occur due to incomplete terms are no longer
immediately highlighted as such.

** ~auto-insert~ now leaves point at start of module summary

** Fixes

- Fixed error in ~sweeprolog-export-predicate~ (~C-c C-e~) in presence of
  exported predicates.  Reported by Jan Wielemaker.

* Version 0.8.8 on 2022-11-16

** Added electric layout minor mode

This version includes a new minor mode ~sweeprolog-electric-layout-mode~
that adjusts whitespace around point as you type to adhere to Prolog
layout conventions.

** The top-level server in now started on-demand

The TCP server that accepts connections from top-level buffers is now
only started on the first invocation of ~sweeprolog-top-level~, instead
of being started already in ~sweeprolog-init~.

** Fixed issue with syntax error highlighting at the end of the buffer

Syntax error highlighting is now removed more reliably when the syntax
error is resolved.

* Version 0.8.7 on 2022-11-12

** Revised predicate completion-at-point and added atom completion

~sweep~'s completion at point now detects when predicate completion is
appropriate based on the context of point.  If point is at a
non-callable position, atom completion is provided instead.

* Version 0.8.6 on 2022-11-11

** New user option ~sweeprolog-new-predicate-location-function~

This user option specifies a function to be called from
~sweeprolog-insert-term-dwim~ when defining a new predicate to choose
the location of the new predicate definition.  The default value of
the option is a function ~sweeprolog-default-new-predicate-location~
which preserves the current behavior of placing the new predicate
right below the current predicate.  Other options include the new
function ~sweeprolog-new-predicate-location-above-current~ which places
the new predicate above the current one.

** Fixes

- Fixed issue where ~sweeprolog-describe-predicate~ would throw an error
  when describing predicates that were cross referenced but not loaded.

* Version 0.8.5 on 2022-11-10

** New command ~sweeprolog-xref-project-source-files~

This command updates ~sweep~'s cross reference data for all Prolog
source files in the current project.  Bound to ~X~ in
~sweeprolog-prefix-map~.

** Minor bug fixes

- Fixed issue where ~sweeprolog-predicate-location~ sometimes returned a
  file importing the predicate in question, rather than actually
  defining it.
- Fixed issue where the ~kill-buffer-hook~ of top-level buffers would
  throw an error when the corresponding top-level thread already died.

* Version 0.8.4 on 2022-11-09

** Various bug fixes

- Fixed regression in variable highlighting where occurrences of the
  highlighted variable in adjacent clauses might have been
  highlighted.
- Fixed regression and added a test for clearing the syntax error face
  immediately when the error is fixed (e.g. a fullstop is inserted at
  the end of a clause).

* Version 0.8.3 on 2022-11-07

** New commands that operate on entire predicate definitions

~sweeprolog-mode~ now includes dedicated function for acting on
predicate definitions that span multiple clauses.  The new commands
are ~sweeprolog-forward-predicate~ and ~sweeprolog-backward-predicate~
bound to ~M-n~ and ~M-p~ respectively, and ~sweeprolog-mark-predicate~ bound
to ~M-h~.

* Version 0.8.2 on 2022-11-07

** Renamed ~sweeprolog-colourise-*~ to ~sweeprolog-analyze-*~

The following user options and commands have been renamed to better
convey their meaning:

| Old symbol name                          | New symbol name                        |
|------------------------------------------+----------------------------------------|
| ~sweeprolog-colourise-buffer~              | ~sweeprolog-analyze-buffer~              |
| ~sweeprolog-colourise-buffer-on-idle~      | ~sweeprolog-analyze-buffer-on-idle~      |
| ~sweeprolog-colourise-buffer-max-size~     | ~sweeprolog-analyze-buffer-max-size~     |
| ~sweeprolog-colourise-buffer-min-interval~ | ~sweeprolog-analyze-buffer-min-interval~ |

* Version 0.8.1 on 2022-10-25

** Added completion-at-point for variable names

When point is preceded by a valid Prolog variable name, invoking
~completion-at-point~ (with ~C-M-i~ or ~M-TAB~) now detects that it needs to
complete a variable name and provides other variable names that occur
in the same clause as completion candidates.

* Version 0.8.0 on 2022-10-22

** New command ~sweeprolog-insert-term-dwim~ in ~sweeprolog-mode~ buffers

This version introduces a new mechanism for context-based term
insertion which revolves around a new command
~sweeprolog-insert-term-dwim~, bound to ~C-M-m~.  When invoked after a
fullstop ending a predicate clause, this command inserts a new clause
for the same predicate.  When called with point over a call to an
undefined predicate, this command insert a definition for that
predicate after the current predicate definition.

** New command ~sweeprolog-forward-hole~ in ~sweeprolog-mode~ buffers

This command, bound to ~C-c C-i~ in ~sweeprolog-mode-map~, moves the
cursor and marks the next hole (placeholder variable) inserted by
~sweeprolog-insert-term-dwim~ for the user to fill it.

** References to Prolog library files are now linkified in help buffers

The HTML rendering ~sweep~ performs to display Prolog documentation in
~*Help*~ buffers now also recognizes reference to Prolog library files,
such as ~library(list)~, in Prolog documentation.  Clicking on such
reference opens the corresponding file from the local Prolog library.

* Version 0.7.2 on 2022-10-20

** ~sweep-module~ is now loaded on-demand

Previously, loading =sweeprolog.el= with e.g. ~(require 'sweeprolog)~
would cause Emacs to also load =sweep-module= immediately, unless the
user option ~sweeprolog-init-on-load~ had been explicitly set by the
user to nil.  This version implements lazy loading of =sweep-module=,
which makes loading =sweeprolog.el= a lot faster and circumvents
potential problems with byte-compiling Elisp files that depend on
=sweeprolog.el= but do not have =sweep-module= available at compile time.

** Newly deprecated user option ~sweeprolog-init-on-load~

The embedded Prolog is now loaded and initiated lazily, regardless of
the value of ~sweeprolog-init-on-load~, which is now obsolete.

* Version 0.7.1 on 2022-10-19

** Jumping to source works also for built-in predicates defined in C

~sweep~ now knows how to find and jump to the definitions of native
built-in SWI-Prolog predicates defined in C, under the condition that
the user has the SWI-Prolog sources checked out locally.

See ~C-h v sweeprolog-swipl-sources~ and the new section "Built-in
Native Predicates" in the manual for more information about this
feature.

** Fixes and improvements to ~sweeprolog-describe-predicate~

This version fixes some compatibility issues with Emacs versions prior
to 29 in ~sweeprolog-describe-predicate~.  Reported by Jan Wielemaker.

* Version 0.7.0 on 2022-10-17

** New command ~sweeprolog-describe-predicate~

Similarly to ~sweeprolog-describe-module~, this command renders the full
=PlDoc= documentation of the specified Prolog predicate in a ~help-mode~
buffer.

** Prolog ~*Help*~ buffers are now cross-referenced

References to Prolog predicates in the ~*Help*~ buffer produced by
~sweeprolog-describe-module~ and ~sweeprolog-describe-predicate~ are now
"buttonized" such that pressing ~RET~ on them shows the description of
the referenced predicate.

* Version 0.6.3 on 2022-10-16

** New command ~sweeprolog-describe-module~

Experimental.  Renders the full =PlDoc= documentation of the specified
Prolog module in a ~help-mode~ buffer.

** Bug fix affecting ~sweeprolog-document-predicate-at-point~

This version includes a fix in ~sweeprolog-beginning-of-top-term~, which
is used to locate the beginning of the current clause.  Previously
this function could hang when invoked with point before the first term
on the buffer.  This affected commands that depend of this function,
such as ~M-x sweeprolog-document-predicate-at-point~.

* Version 0.6.2 on 2022-10-15

** New command ~sweeprolog-export-predicate~ in ~sweeprolog-mode~ buffers

~sweeprolog-export-predicate~ is a new command available in
~sweeprolog-mode~ buffers for adding the predicate defined at point to
the current module's export list.  Bound to =C-c C-e= in
~sweeprolog-mode-map~.

** Added a Prolog flag indicating the Prolog is running under ~sweep~

=sweeprolog.el= now creates a boolean Prolog flag ~sweep~ set to ~true~ when
initiating Prolog, to allow users to customize their Prolog init file
accordingly.

* Version 0.6.0 on 2022-10-10

** Added integration with Flymake

=sweeprolog.el= can now leverage ~flymake~ to highlight and browse
diagnostics in ~sweeprolog-mode~ buffers.

** New user option ~sweeprolog-enable-flymake~

Boolean flag, enabled by default. When customized to nil,
~sweeprolog-mode~ integration with ~flymake~ is disabled.

** New command ~sweeprolog-show-diagnostics~

Wrapper around ~flymake-show-buffer-diagnostics~ for ~sweeprolog-mode~,
bound to ~C-c C-`~.  With a prefix argument, calls
~flymake-show-project-diagnostics~ instead.

** Fixed bug in end of a clause detection in presence of ~=..~

This version includes a fix in ~sweeprolog-end-of-top-term~, which is
used to locate the end of the current clause.  Previously this
function would get "confused" by occurrences of the ~=../2~ ("univ")
operator in the clause's body.

* Version 0.5.4 on 2022-10-09

** The manual now has a short description attached to each section
** Fixed issue with loading ~sweep-module~ from a directory with spaces in its name

* Version 0.5.3 on 2022-10-08

** New command ~sweeprolog-align-spaces~ in ~sweeprolog-mode~ buffers

~sweeprolog-align-spaces~ is a new command available in ~sweeprolog-mode~
buffers for updating the whitespace around point according to the
SWI-Prolog convention used in if-then-else constructs where the next
token begins four columns after the start of the previous token.

** New user option ~sweeprolog-enable-cycle-spacing~

In Emacs 29, when this user option is non-nil (the default),
~sweeprolog-align-spaces~ is added to ~cycle-spacing-actions~ such that
pressing ~M-SPC~ once invokes it by default.


* Version 0.5.2 on 2022-10-07

** Fixed bug in detecting the end of a clause with commented fullstops

This version includes a fix in ~sweeprolog-end-of-top-term~, which is
used to locate the end of the current clause.  Previously this
function would get "confused" by in-clause comments that end with a
fullstop (see the added test case in ~sweeprolog-test.el~ for an
example).  Reported by Jan Wielemaker.

* Version 0.5.0 on 2022-10-04

** New special buffer for listing and working with multiple top-levels

=sweep= is now able to create a special buffer that contains a table of
all active top-levels, called the Top-level Menu buffer.  This buffer
has its own special major mode, ~sweeprolog-top-level-menu-mode~, which
provides convenient commands that operate on the listed top-levels.

** New commands for interrupting running top-levels

=sweep= now includes a new command ~M-x sweeprolog-top-level-signal~ which
prompts for a =sweep= top-level buffer and a Prolog goal and signals the
specified top-level to execute the given goal.  This can be used to
interrupt long running queries.

The ~sweeprolog-top-level-mode~ major mode provides a variant of the
above command called ~sweeprolog-top-level-signal-current~ that operates
on the top-level thread of the current buffer.  This command is also
newly bound to ~C-c C-c~ in top-level buffers.

** New command ~sweeprolog-document-predicate-at-point~ in ~sweeprolog-mode~ buffers

~sweeprolog-document-predicate-at-point~ is a new command available in
~sweeprolog-mode~ buffers for interactively inserting =PlDoc=
documentation comments for the predicate defined at point.  Bound to
=C-c C-d= in ~sweeprolog-mode-map~.

** New manual sections "Contributing" and "Things to do"

* Version 0.4.7 on 2022-10-01

** Added integration with =eldoc=

=sweeprolog.el= can now leverage =eldoc= to display short documentation
for the Prolog predicate at point in =sweeprolog-mode= buffers.

** New user option =sweeprolog-enable-eldoc=

Boolean flag, enabled by default. When customized to nil,
=sweeprolog-mode= integration with =eldoc= is disabled.

* Version 0.4.6 on 2022-10-01

** Added integration with =auto-insert=

=sweeprolog.el= now extends =auto-insert-alist= with a Prolog module
template associated with =sweeprolog-mode=.  The module template is
inserted into empty =sweeprolog-buffers= when =auto-insert-mode= is
enabled.

* New commands in =sweep= version =0.4.0=
** New command =sweeprolog-load-buffer=.

Loads a =sweeprolog-mode= buffer.  If called from a =sweeprolog-mode= buffer, loads
the current buffer by default.

** New command =sweeprolog-find-file-at-point=.

Follows file specifications in =sweeprolog-mode= buffers.


* New keybindings in =sweeprolog-mode= buffers

** =C-c C-l= is now bound to =sweeprolog-load-buffer=.

** =C-c C-o= is now bound to =sweeprolog-find-file-at-point=.


* New user options in =sweep= version =0.4.0=

** New user option =sweeprolog-faces-style=

This option controls the which style of faces will be used for
highlighting in =sweeprolog-mode= buffers.  Possible options are =light=, =dark=
and =default=.

** New user option =sweeprolog-indent-offset=

This option, set by default to 4, is an integer denoting the number of
columns used as the indent increment in =sweeprolog-mode= buffers.

** New user option =sweeprolog-colourise-buffer-on-idle=

This option is a boolean flag that determines whether to enable
automatic updating of semantic highlighting in =sweeprolog-mode= buffers.

** New user option =sweeprolog-colourise-buffer-min-interval=

This option determines the minimum number of idle seconds that =sweep=
will wait before updating semantic highlighting in a =sweeprolog-mode=
buffer.

** New user option =sweeprolog-colourise-buffer-max-size=

This option determines the maximum size of a =sweeprolog-mode= buffer for
which =sweep= will periodically update semantic highlighting on idle.

** New user option =sweeprolog-top-level-min-history-length=

This option, set by default to 3, determines a minimum length for
inputs inserted into =sweep= top-level history ring.  The default value,
3, avoids one character top-level responses from clobbering the
history ring.  This kind of inputs includes, for example, the =;=
character typed to invoke backtracking.


* New keybindings in =sweeprolog-prefix-map=

** The =l= key is now bound to =sweeprolog-load-buffer=.
